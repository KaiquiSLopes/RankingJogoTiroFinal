package br.com.ranking.jogo;

import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashSet;

import org.junit.Test;

import br.com.ranking.util.Arquivo;

public class Principal{
	public static final int NOME_QUEM_FEZ = 0;

	@Test
	public void executar() {

		try {

			ArrayList< String > linhasArquivo = carregarArquivoLog( "D:/Desenvolvimento/PROJETOS KAIQUI SWING/workspace/RankingJogoTiroFinal/Arquivo.txt" );

			//		pegar uma partida para cada new que eu achar no doc
			ArrayList< Partida > partidas = carregarDadosPartida( linhasArquivo );
			//			System.out.println( partidas );

			for ( Partida partida : partidas ) {
				System.out.println( partida );
			}

			//			HashSet< Jogador > jogadores = new HashSet<Jogador>();
			//			for ( Partida partidaCorrente : partidas ) {
			//				jogadores.addAll( carregarJogadores( linhasArquivo, partidaCorrente ) );
			//			}

			//			ArrayList< Evento > eventos = prapararEvento( linhasArquivo, jogadores );
		} catch ( Exception e ) {
			e.printStackTrace();
		}

	}

	/** METODO RESPONSAVEL POR CHAMAR O ARQUIVO TXT COM AS INFORMAÇÕES DO LOG */
	private ArrayList< String > carregarArquivoLog( String caminho ) throws IOException {
		return (ArrayList< String >) new Arquivo().lerArquivoTxt( caminho );
	}

	private void prapararEvento( String dadosData, String dadosJogador, Jogador jogador ) throws ParseException {
		String[ ] dados = dadosJogador.split( " " );

		String acao = dados[ 1 ];
		String vitima = dados[ 2 ];
		String usingOrBy = dados[ 3 ];
		String armaOrCaussa = dados[ 4 ];

		Evento evento = new Evento();

		if ( "killed".equalsIgnoreCase( acao ) ) {

			evento.setJogador( vitima );
			evento.setData( new SimpleDateFormat( "dd/MM/yyyy HH:mm:ss" ).parse( dadosData ) );

			if ( "using".equalsIgnoreCase( usingOrBy ) ) {
				evento.setArma( armaOrCaussa );
			} else if ( "by".equalsIgnoreCase( usingOrBy ) ) {
				evento.setCausa( armaOrCaussa );
			}

			jogador.getAssassinatos().add( evento );

		}
	}

	private void carregarJogadores( String data, String dados, Partida partidaCorrente ) throws ParseException {
		String nomeJogador = dados.split( " " )[ NOME_QUEM_FEZ ];
		Jogador jogador = new Jogador();
		jogador.setNome( nomeJogador );
		partidaCorrente.getJogadores().add( jogador );
		
		if(partidaCorrente.getJogadores().contains( jogador )){
			ArrayList< Jogador > jogadores = new ArrayList<>(partidaCorrente.getJogadores());
			jogador = jogadores.get(jogadores.indexOf( jogador ));
			return;
		}
		prapararEvento( data, dados, jogador );

	}

	//	DOCUEMNTAR o UQE FAZ
	private ArrayList< Partida > carregarDadosPartida( ArrayList< String > linhasArquivo ) throws Exception {
		ArrayList< Partida > partidas = new ArrayList<>();
		Partida partida = null;

		//		Identificar quando comeca a partida e quando termina a partida. 
		for ( String linhaCorrente : linhasArquivo ) {
			String data = linhaCorrente.split( " - " )[ Ranking.INDICE_DATA ];
			String dados = linhaCorrente.split( " - " )[ Ranking.INDICE_DADOS ];

			if ( linhaCorrente.contains( "New" ) ) {
				partida = new Partida();
				String dataInicio = data;
				partida.setDataInicio( new SimpleDateFormat( "dd/MM/yyyy HH:mm:ss" ).parse( dataInicio ) );

				partida.setNumero( Long.valueOf( dados.split( " " )[ 2 ] ) );

				continue;
			} else if ( linhaCorrente.contains( "ended" ) ) {
				if ( partida == null ) {
					throw new Exception( "Partida não inicializada" );
				}
				String dataTermino = data;
				partida.setDataTermino( new SimpleDateFormat( "dd/MM/yyyy HH:mm:ss" ).parse( dataTermino ) );
			}
			if ( partida != null && partida.getDataTermino() != null ) {
				partidas.add( partida );
			} else {
				//				System.out.println( "Partida Em Curso: " + partida.getNumero() + " " + dados );

				carregarJogadores( data, dados, partida );

			}

		}

		return partidas;
	}
}