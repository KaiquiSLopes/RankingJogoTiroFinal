package br.com.ranking.jogo;

import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;

import br.com.ranking.util.Arquivo;

/**
 * Classe que representa
 *
 *
 * @author Kaiqui Lopes <kaiquilopes@gmail.com.br>
 * @since 16 de jun de 2016 17:58:34
 * @version 1.0
 */
public class ControladorPartida{
	
	
	/** METODO RESPONSAVEL POR CHAMAR O ARQUIVO TXT COM AS INFORMAÇÕES DO LOG */
	private ArrayList< String > carregarArquivoLog( String caminho ) throws IOException {
		return (ArrayList< String >) new Arquivo().lerArquivoTxt( caminho );
	}

	private void prapararEvento( String dadosData, String dadosJogador, Jogador jogador ) throws ParseException {
		String[ ] dados = dadosJogador.split( " " );

		String acao = dados[ ACAO_KILLED ];
		String vitima = dados[ NOME_VITIMA ];
		String usingOrBy = dados[ USANDO_OU_CAUSA ];
		String armaOrCaussa = dados[ ARMA_OU_CAUSA ];

		Evento evento = new Evento();

		if ( "killed".equalsIgnoreCase( acao ) ) {

			evento.setJogador( vitima );
			evento.setData( new SimpleDateFormat( "dd/MM/yyyy HH:mm:ss" ).parse( dadosData ) );

			if ( "using".equalsIgnoreCase( usingOrBy ) ) {
				evento.setArma( armaOrCaussa );
			} else if ( "by".equalsIgnoreCase( usingOrBy ) ) {
				evento.setCausa( armaOrCaussa );
			}

			jogador.getAssassinatos().add( evento );

		}
	}

	private void carregarJogadores( String data, String dados, Partida partidaCorrente ) throws ParseException {
		String nomeJogador = dados.split( " " )[ NOME_QUEM_FEZ ];
		Jogador jogador = new Jogador();
		jogador.setNome( nomeJogador );
		
		
		if(partidaCorrente.getJogadores().contains( jogador )){
			jogador = partidaCorrente.getJogadores().get(partidaCorrente.getJogadores().indexOf( jogador ));
		}else{
			partidaCorrente.getJogadores().add( jogador );
		}
		prapararEvento( data, dados, jogador );

	}

	//	DOCUEMNTAR o UQE FAZ
	private ArrayList< Partida > carregarDadosPartida( ArrayList< String > linhasArquivo ) throws Exception {
		ArrayList< Partida > partidas = new ArrayList<>();
		Partida partida = null;

		//		Identificar quando comeca a partida e quando termina a partida. 
		for ( String linhaCorrente : linhasArquivo ) {
			String data = linhaCorrente.split( " - " )[ Ranking.INDICE_DATA ];
			String dados = linhaCorrente.split( " - " )[ Ranking.INDICE_DADOS ];

			if ( linhaCorrente.contains( "New" ) ) {
				partida = new Partida();
				String dataInicio = data;
				partida.setDataInicio( new SimpleDateFormat( "dd/MM/yyyy HH:mm:ss" ).parse( dataInicio ) );

				partida.setNumero( Long.valueOf( dados.split( " " )[ NUMERO_PARTIDA ] ) );

				continue;
			} else if ( linhaCorrente.contains( "ended" ) ) {
				if ( partida == null ) {
					throw new Exception( "Partida não inicializada" );
				}
				String dataTermino = data;
				partida.setDataTermino( new SimpleDateFormat( "dd/MM/yyyy HH:mm:ss" ).parse( dataTermino ) );
			}
			if ( partida != null && partida.getDataTermino() != null ) {
				partidas.add( partida );
			} else {
				carregarJogadores( data, dados, partida );
			}

		}

		return partidas;
	}

}
